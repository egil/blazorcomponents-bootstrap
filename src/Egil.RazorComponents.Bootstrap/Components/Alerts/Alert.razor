@using Egil.RazorComponents.Bootstrap
@using Egil.RazorComponents.Bootstrap.Components.Alerts.Parameters;
@using Egil.RazorComponents.Bootstrap.Components.Html;
@using Egil.RazorComponents.Bootstrap.Utilities.Animations;
@using Egil.RazorComponents.Bootstrap.Utilities.Colors;
@using Egil.RazorComponents.Bootstrap.Utilities.Spacing;
@using Microsoft.AspNetCore.Components;

@inherits BootstrapParentComponentBase

@code {
    private ICssClassAnimation DismissAnimation { get; } = new FadeOutAnimation();

    [Parameter(CaptureUnmatchedValues = true)] 
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; private set; } // TODO P7: Add to element

    [Parameter]
    public bool Enabled { get; set; } = true;

    [Parameter]
    public string Role { get; set; } = "alert";

    [Parameter]
    public SpacingParameter<PaddingSpacing> Padding { get; set; } = SpacingParameter<PaddingSpacing>.None;

    [Parameter]
    public SpacingParameter<MarginSpacing> Margin { get; set; } = SpacingParameter<MarginSpacing>.None;

    [Parameter]
    public ColorParameter<AlertColor> Color { get; set; } = OptionsFactory.Primary;

    [Parameter]
    public DismissableParameter Dismissable { get; set; } = DismissableParameter.None;

    [Parameter]
    public EventCallback<UIDismissingEventArgs> OnDismissing { get; set; }

    [Parameter]
    public EventCallback OnDismissed { get; set; }

    public AlertState State { get; private set; } = AlertState.Visible;

    public Alert()
    {
        DefaultCssClass = "alert";
    }

    public async Task Dismiss()
    {
        var evt = await NotifyParent();
        if (evt.Cancel) { return; }

        await DismissAlert();

        DisableAfter();

        async Task<UIDismissingEventArgs> NotifyParent()
        {
            var evt = new UIDismissingEventArgs();
            await OnDismissing.InvokeAsync(evt);
            return evt;
        }

        async Task DismissAlert()
        {
            State = AlertState.Dismissing;
            await DismissAnimation.Run();
            State = AlertState.Dismissed;
            await OnDismissed.InvokeAsync(EventCallback.Empty);
        }

        void DisableAfter()
        {
            if (!evt.EnabledAfter)
            {
                Enabled = false;
                StateHasChanged();
            }
        }
    }

    public void Show()
    {
        State = AlertState.Visible;
        Enabled = true;
        StateHasChanged();
        DismissAnimation.Reset();
        StateHasChanged();
    }

    protected override void RegisterChildContextRules()
    {
        ChildContext.RegisterRule<A>(x => x.DefaultCssClass = "alert-link");
        ChildContext.RegisterRule<Heading, H1, H2, H3, H4, H5, H6>(x => x.DefaultCssClass = "alert-heading");
    }
}
@if (Enabled)
{
    <div id=@Id class=@CssClassValue role=@Role>
        @ChildContent
        @if ((bool)Dismissable)
        {
            <button type="button" class="close" aria-label="Close" @onclick=@Dismiss>
                <span aria-hidden="true">&times;</span>
            </button>
        }
    </div>
}